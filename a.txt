Registro de Receitas e Despesas:

Usuários podem adicionar, editar e remover receitas e despesas.
Cada transação pode ter uma data, categoria, descrição e valor.
Podemos usar listas e filas para gerenciar a inserção e remoção de transações, e ordenar pela data usando estruturas de dados.
Classificação e Categorização:

Permitir que cada transação seja categorizada (por exemplo: alimentação, transporte, entretenimento).
Utilizar um dicionário ou árvore para armazenar e acessar categorias rapidamente.
Relatórios e Análise de Dados:

Gerar relatórios que mostram despesas e receitas por mês, ano, ou categoria.
Calcular média, máximos e mínimos para cada categoria.
Podemos usar uma estrutura de árvore ou heap para organizar e acessar os dados para relatórios mais complexos.
Persistência com Banco de Dados e ORM:

Usar SQLite ou PostgreSQL para armazenar dados de usuários e transações.
Usar SQLAlchemy (ORM) para facilitar o trabalho com o banco de dados.
Criar tabelas para usuários, transações e categorias e definir as relações necessárias entre elas.
Autenticação e Gerenciamento de Usuários:

Implementar uma simples autenticação com login e senha.
Usar criptografia para armazenar senhas e manter os dados seguros.
Escalabilidade com Docker:

Configurar o projeto para rodar em containers Docker para facilitar o desenvolvimento e a escalabilidade.
Criar um container para o banco de dados e outro para o backend Python com Flet.



budget_manager/
├── app/
│   ├── main.py                 # Código principal com a interface Flet
│   ├── models.py               # Modelos do SQLAlchemy para transações, categorias e usuários
│   ├── controllers.py          # Funções para manipulação dos dados no banco
│   ├── database.py             # Configuração do banco de dados
│   ├── auth.py                 # Funções de autenticação e gerenciamento de usuários
│   └── utils.py                # Funções utilitárias, como cálculo de relatórios
├── Dockerfile                  # Dockerfile para o backend
├── docker-compose.yml          # Configuração do Docker Compose
└── requirements.txt            # Dependências do Python
